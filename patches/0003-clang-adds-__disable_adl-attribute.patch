From 64fb48f89cba309d2dc109f6f952cd0342816a6d Mon Sep 17 00:00:00 2001
From: Christopher Di Bella <cjdb.ns@gmail.com>
Date: Fri, 2 Jun 2023 21:00:01 -0700
Subject: [PATCH 3/3] [clang] adds `__disable_adl` attribute

Certain library functions need to disable ADL. For example, the functions
in [range.iter.ops]/2 and [algorithms.requirements]/2 require functions
declared in namespaces 'std::ranges' aren't found by ADL, and that they
suppress ADL when called in an unqualified context (e.g. by way of a
_using-directive_). Conversations with developers on the #include <C++>
Discord channel identifies that there's a desire for this outside the
ranges library.

Libraries have been implementing these functions as function objects
with varying rules (e.g. libc++ and Microsoft/STL both try their best to
make the function objects appear as standard library function templates,
while libstdc++ makes them plain function objects). Having a large number
of types typically has a negative impact on both compile-times and progam
size.

This commit has seen compile times halved when the `__disable_adl`
attribute is applied instead of opting to use a function object.
---
 clang/include/clang/AST/ExprCXX.h             |   3 +
 clang/include/clang/Basic/Attr.td             |   7 +
 clang/include/clang/Basic/AttrDocs.td         |  74 +++++++-
 .../clang/Basic/DiagnosticSemaKinds.td        |   3 +
 clang/include/clang/Basic/TokenKinds.def      |   1 +
 clang/lib/Parse/ParseDecl.cpp                 |   9 +
 clang/lib/Sema/SemaDeclAttr.cpp               |  14 ++
 clang/lib/Sema/SemaLookup.cpp                 |   3 +
 clang/lib/Sema/SemaOverload.cpp               |  25 ++-
 clang/test/SemaCXX/disable-adl.cpp            | 179 ++++++++++++++++++
 10 files changed, 305 insertions(+), 13 deletions(-)
 create mode 100644 clang/test/SemaCXX/disable-adl.cpp

diff --git a/clang/include/clang/AST/ExprCXX.h b/clang/include/clang/AST/ExprCXX.h
index f5e805257ce5..156073366781 100644
--- a/clang/include/clang/AST/ExprCXX.h
+++ b/clang/include/clang/AST/ExprCXX.h
@@ -3222,6 +3222,9 @@ public:
   /// argument-dependent lookup.
   bool requiresADL() const { return UnresolvedLookupExprBits.RequiresADL; }
 
+  /// A function marked '__disable_adl' inhibits ADL.
+  void disableADL() { UnresolvedLookupExprBits.RequiresADL = false; }
+
   /// True if this lookup is overloaded.
   bool isOverloaded() const { return UnresolvedLookupExprBits.Overloaded; }
 
diff --git a/clang/include/clang/Basic/Attr.td b/clang/include/clang/Basic/Attr.td
index 3fdd84d2b13b..aecdfef4235e 100644
--- a/clang/include/clang/Basic/Attr.td
+++ b/clang/include/clang/Basic/Attr.td
@@ -4193,3 +4193,10 @@ def ReadOnlyPlacement : InheritableAttr {
   let Subjects = SubjectList<[Record]>;
   let Documentation = [ReadOnlyPlacementDocs];
 }
+
+def DisableADL : InheritableAttr {
+  let Spellings = [CustomKeyword<"__disable_adl">];
+  let Subjects = SubjectList<[Function]>;
+  let Documentation = [DisableADLDocs];
+  let LangOpts = [CPlusPlus];
+}
diff --git a/clang/include/clang/Basic/AttrDocs.td b/clang/include/clang/Basic/AttrDocs.td
index 5bf3333972b1..d8fb26181671 100644
--- a/clang/include/clang/Basic/AttrDocs.td
+++ b/clang/include/clang/Basic/AttrDocs.td
@@ -539,16 +539,16 @@ def NoMergeDocs : Documentation {
   let Category = DocCatStmt;
   let Content = [{
 If a statement is marked ``nomerge`` and contains call expressions, those call
-expressions inside the statement will not be merged during optimization. This 
+expressions inside the statement will not be merged during optimization. This
 attribute can be used to prevent the optimizer from obscuring the source
 location of certain calls. For example, it will prevent tail merging otherwise
 identical code sequences that raise an exception or terminate the program. Tail
 merging normally reduces the precision of source location information, making
 stack traces less useful for debugging. This attribute gives the user control
-over the tradeoff between code size and debug information precision. 
+over the tradeoff between code size and debug information precision.
 
-``nomerge`` attribute can also be used as function attribute to prevent all 
-calls to the specified function from merging. It has no effect on indirect 
+``nomerge`` attribute can also be used as function attribute to prevent all
+calls to the specified function from merging. It has no effect on indirect
 calls.
   }];
 }
@@ -7027,6 +7027,72 @@ its underlying representation to be a WebAssembly ``funcref``.
   }];
 }
 
+def DisableADLDocs : Documentation {
+  let Category = DocCatType;
+  let Content = [{
+    This attribute informs the compiler that overloads in the immediate scope should not be found by
+    argument-dependent lookup (ADL), and that when found by unqualified name lookup, they inhibit
+    ADL. This is useful for implementing libraries whose design is not centred around ADL, but wish
+    to continue writing functions as opposed to function objects (which can impact build times).
+
+    Example:
+
+    .. code-block:: cpp
+
+      namespace NS1 {
+        struct S1 {};
+        S1 inhibited(S1); // expected-note 2 {{candidate function}}
+
+        namespace NNS1 {
+          struct S2 {};
+          __disable_adl void hidden(S2);   // expected-note{{declared here}}
+          __disable_adl int inhibited(S1); // expected-note 4 {{candidate function}}
+        }
+      }
+
+      namespace NS2 {
+        __disable_adl void inhibited(NS1::S1); // expected-note 2 {{candidate function}}
+      }
+
+      int main()
+      {
+        NS1::S1 s;
+        hidden(s); // error: use of undeclared identifier 'hidden'; did you mean 'NS::NNS::hidden'?
+        {
+          NS1::S1 x = inhibited(NS1::S1{}); // no error
+        }
+        {
+          using namespace NS1::NNS1;
+          int x = inhibited(NS1::S1{}); // no error
+
+          using namespace NS1;
+          S1 y = inhibited(NS1::S1{}); // error: call to 'inhibited' is ambiguous
+        }
+        {
+          using NS1::NNS1::inhibited;
+          int x = inhibited(NS1::S1{}); // no error
+
+          using NS1::inhibited;
+          NS1::S1 y = inhibited(NS1::S1{}); // error: call to 'inhibited' is ambiguous
+        }
+        {
+          using namespace NS2;
+          inhibited(NS1::S1{}); // no error
+
+          using namespace NS1::NNS1;
+          inhibited(NS1::S1{}); // error: call to 'inhibited' is ambiguous
+        }
+        {
+          using NS2::inhibited;
+          inhibited(NS1::S1{}); // no error
+
+          using NS1::NNS1::inhibited;
+          inhibited(NS1::S1{}); // error: call to 'inhibited' is ambiguous
+        }
+      }
+  }];
+}
+
 def CleanupDocs : Documentation {
   let Category = DocCatType;
   let Content = [{
diff --git a/clang/include/clang/Basic/DiagnosticSemaKinds.td b/clang/include/clang/Basic/DiagnosticSemaKinds.td
index d1a5576ebcbf..d863169b7e35 100644
--- a/clang/include/clang/Basic/DiagnosticSemaKinds.td
+++ b/clang/include/clang/Basic/DiagnosticSemaKinds.td
@@ -3192,6 +3192,9 @@ def err_attribute_invalid_size : Error<
   "vector size not an integral multiple of component size">;
 def err_attribute_zero_size : Error<"zero %0 size">;
 def err_attribute_size_too_large : Error<"%0 size too large">;
+def err_disable_adl_no_operators : Error<
+  "can't apply '__disable_adl' to %select{operators, since they're supposed to "
+  "be used with ADL|member functions}0">;
 def err_typecheck_sve_rvv_ambiguous : Error<
   "cannot combine fixed-length and sizeless %select{SVE|RVV}0 vectors "
   "in expression, result is ambiguous (%1 and %2)">;
diff --git a/clang/include/clang/Basic/TokenKinds.def b/clang/include/clang/Basic/TokenKinds.def
index 238296b81224..542823d0590c 100644
--- a/clang/include/clang/Basic/TokenKinds.def
+++ b/clang/include/clang/Basic/TokenKinds.def
@@ -749,6 +749,7 @@ ALIAS("__char32_t"   , char32_t          , KEYCXX)
 KEYWORD(__builtin_bit_cast               , KEYALL)
 KEYWORD(__builtin_available              , KEYALL)
 KEYWORD(__builtin_sycl_unique_stable_name, KEYSYCL)
+KEYWORD(__disable_adl                    , KEYCXX)
 
 // Keywords defined by Attr.td.
 #ifndef KEYWORD_ATTRIBUTE
diff --git a/clang/lib/Parse/ParseDecl.cpp b/clang/lib/Parse/ParseDecl.cpp
index 32085461ff8b..cc3a39938ece 100644
--- a/clang/lib/Parse/ParseDecl.cpp
+++ b/clang/lib/Parse/ParseDecl.cpp
@@ -3870,6 +3870,15 @@ void Parser::ParseDeclarationSpecifiers(
       ParseAttributes(PAKM_GNU | PAKM_Declspec, DS.getAttributes(), LateAttrs);
       continue;
 
+    case tok::kw___disable_adl: {
+      IdentifierInfo *AttrName = Tok.getIdentifierInfo();
+      SourceLocation AttrNameLoc = Tok.getLocation();
+      DS.getAttributes().addNew(
+          AttrName, AttrNameLoc, /*scopeName=*/nullptr, AttrNameLoc,
+          /*args=*/nullptr, /*NumArgs=*/0, tok::kw___disable_adl);
+      break;
+    }
+
     // Microsoft single token adornments.
     case tok::kw___forceinline: {
       isInvalid = DS.setFunctionSpecForceInline(Loc, PrevSpec, DiagID);
diff --git a/clang/lib/Sema/SemaDeclAttr.cpp b/clang/lib/Sema/SemaDeclAttr.cpp
index 40438214d2b4..dd4b066c763a 100644
--- a/clang/lib/Sema/SemaDeclAttr.cpp
+++ b/clang/lib/Sema/SemaDeclAttr.cpp
@@ -5862,6 +5862,16 @@ static void handleBuiltinAliasAttr(Sema &S, Decl *D,
   D->addAttr(::new (S.Context) BuiltinAliasAttr(S.Context, AL, Ident));
 }
 
+static void handleDisableADLAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
+  if (FunctionDecl *F = D->getAsFunction();
+      F->isOverloadedOperator() || F->isCXXClassMember()) {
+    S.Diag(AL.getLoc(), diag::err_disable_adl_no_operators)
+        << F->isCXXClassMember();
+    return;
+  }
+  D->addAttr(::new (S.Context) DisableADLAttr(S.Context, AL));
+}
+
 //===----------------------------------------------------------------------===//
 // Checker-specific attribute handlers.
 //===----------------------------------------------------------------------===//
@@ -9470,6 +9480,10 @@ ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D, const ParsedAttr &AL,
   case ParsedAttr::AT_UsingIfExists:
     handleSimpleAttribute<UsingIfExistsAttr>(S, D, AL);
     break;
+
+  case ParsedAttr::AT_DisableADL:
+    handleDisableADLAttr(S, D, AL);
+    break;
   }
 }
 
diff --git a/clang/lib/Sema/SemaLookup.cpp b/clang/lib/Sema/SemaLookup.cpp
index ba873b018745..b789d2120d4b 100644
--- a/clang/lib/Sema/SemaLookup.cpp
+++ b/clang/lib/Sema/SemaLookup.cpp
@@ -3865,6 +3865,9 @@ void Sema::ArgumentDependentLookup(DeclarationName Name, SourceLocation Loc,
           !isa<FunctionTemplateDecl>(Underlying))
         continue;
 
+      if (Underlying->getAsFunction()->hasAttr<DisableADLAttr>())
+        continue;
+
       // The declaration is visible to argument-dependent lookup if either
       // it's ordinarily visible or declared as a friend in an associated
       // class.
diff --git a/clang/lib/Sema/SemaOverload.cpp b/clang/lib/Sema/SemaOverload.cpp
index 4ef8f87dca3c..74be0cd840f9 100644
--- a/clang/lib/Sema/SemaOverload.cpp
+++ b/clang/lib/Sema/SemaOverload.cpp
@@ -12964,18 +12964,20 @@ bool Sema::ResolveAndFixSingleFunctionTemplateSpecialization(
 }
 
 /// Add a single candidate to the overload set.
-static void AddOverloadedCallCandidate(Sema &S,
-                                       DeclAccessPair FoundDecl,
-                                 TemplateArgumentListInfo *ExplicitTemplateArgs,
-                                       ArrayRef<Expr *> Args,
-                                       OverloadCandidateSet &CandidateSet,
-                                       bool PartialOverloading,
-                                       bool KnownValid) {
+static void AddOverloadedCallCandidate(
+    Sema &S, DeclAccessPair FoundDecl,
+    TemplateArgumentListInfo *ExplicitTemplateArgs, ArrayRef<Expr *> Args,
+    OverloadCandidateSet &CandidateSet, bool PartialOverloading,
+    bool KnownValid, UnresolvedLookupExpr *ULE) {
   NamedDecl *Callee = FoundDecl.getDecl();
   if (isa<UsingShadowDecl>(Callee))
     Callee = cast<UsingShadowDecl>(Callee)->getTargetDecl();
 
   if (FunctionDecl *Func = dyn_cast<FunctionDecl>(Callee)) {
+    if (Func->hasAttr<DisableADLAttr>() && ULE) {
+      ULE->disableADL();
+    }
+
     if (ExplicitTemplateArgs) {
       assert(!KnownValid && "Explicit template arguments?");
       return;
@@ -12992,6 +12994,10 @@ static void AddOverloadedCallCandidate(Sema &S,
 
   if (FunctionTemplateDecl *FuncTemplate
       = dyn_cast<FunctionTemplateDecl>(Callee)) {
+    if (FuncTemplate->getAsFunction()->hasAttr<DisableADLAttr>() && ULE) {
+      ULE->disableADL();
+    }
+
     S.AddTemplateOverloadCandidate(FuncTemplate, FoundDecl,
                                    ExplicitTemplateArgs, Args, CandidateSet,
                                    /*SuppressUserConversions=*/false,
@@ -13050,7 +13056,7 @@ void Sema::AddOverloadedCallCandidates(UnresolvedLookupExpr *ULE,
          E = ULE->decls_end(); I != E; ++I)
     AddOverloadedCallCandidate(*this, I.getPair(), ExplicitTemplateArgs, Args,
                                CandidateSet, PartialOverloading,
-                               /*KnownValid*/ true);
+                               /*KnownValid*/ true, ULE);
 
   if (ULE->requiresADL())
     AddArgumentDependentLookupCandidates(ULE->getName(), ULE->getExprLoc(),
@@ -13065,7 +13071,8 @@ void Sema::AddOverloadedCallCandidates(
     ArrayRef<Expr *> Args, OverloadCandidateSet &CandidateSet) {
   for (LookupResult::iterator I = R.begin(), E = R.end(); I != E; ++I)
     AddOverloadedCallCandidate(*this, I.getPair(), ExplicitTemplateArgs, Args,
-                               CandidateSet, false, /*KnownValid*/ false);
+                               CandidateSet, false, /*KnownValid*/ false,
+                               nullptr);
 }
 
 /// Determine whether a declaration with the specified name could be moved into
diff --git a/clang/test/SemaCXX/disable-adl.cpp b/clang/test/SemaCXX/disable-adl.cpp
new file mode 100644
index 000000000000..fb10e39ee338
--- /dev/null
+++ b/clang/test/SemaCXX/disable-adl.cpp
@@ -0,0 +1,179 @@
+// RUN: %clang_cc1 %s -fsyntax-only -verify -std=c++20
+// RUN: %clang_cc1 %s -fsyntax-only -verify -std=c++2b
+
+namespace NS1 {
+  struct S1 {};
+  S1 inhibited(S1); // expected-note 2 {{candidate function}}
+
+  namespace NNS1 {
+    struct S2 {};
+    __disable_adl void hidden(S2);   // expected-note{{declared here}}
+    __disable_adl int inhibited(S1); // expected-note 4 {{candidate function}}
+  }
+}
+
+namespace NS2 {
+  __disable_adl void inhibited(NS1::S1); // expected-note 2 {{candidate function}}
+}
+
+void test_functions() {
+  hidden(NS1::NNS1::S2{}); // expected-error{{use of undeclared identifier 'hidden'; did you mean 'NS1::NNS1::hidden'?}}
+  {
+    NS1::S1 x = inhibited(NS1::S1{}); // no error
+  }
+  {
+    using namespace NS1::NNS1;
+    int x = inhibited(NS1::S1{}); // no error
+
+    using namespace NS1;
+    S1 y = inhibited(NS1::S1{}); // expected-error{{call to 'inhibited' is ambiguous}}
+  }
+  {
+    using NS1::NNS1::inhibited;
+    int x = inhibited(NS1::S1{}); // no error
+
+    using NS1::inhibited;
+    NS1::S1 y = inhibited(NS1::S1{}); // expected-error{{call to 'inhibited' is ambiguous}}
+  }
+  {
+    using namespace NS2;
+    inhibited(NS1::S1{}); // no error
+
+    using namespace NS1::NNS1;
+    inhibited(NS1::S1{}); // expected-error{{call to 'inhibited' is ambiguous}}
+  }
+  {
+    using NS2::inhibited;
+    inhibited(NS1::S1{}); // no error
+
+    using NS1::NNS1::inhibited;
+    inhibited(NS1::S1{}); // expected-error{{call to 'inhibited' is ambiguous}}
+  }
+}
+
+namespace NS1 {
+  template<typename T>
+  S1 inhibited_template(T); // expected-note 2 {{candidate function}}
+
+  namespace NNS1 {
+    template<typename T>
+    __disable_adl void hidden_template(T); // expected-note{{declared here}}
+
+    template<typename T>
+    __disable_adl int inhibited_template(T); // expected-note 4 {{candidate function}}
+  }
+}
+
+namespace NS2 {
+  template<typename T>
+  __disable_adl int inhibited_template(T); // expected-note 2 {{candidate function}}
+}
+
+void test_function_templates() {
+  hidden_template(NS1::NNS1::S2{}); // expected-error{{use of undeclared identifier 'hidden_template'; did you mean 'NS1::NNS1::hidden_template'?}}
+
+  {
+    NS1::S1 x = inhibited_template(NS1::S1{}); // no error
+  }
+  {
+    using namespace NS1::NNS1;
+    int x = inhibited_template(NS1::S1{}); // no error
+
+    using namespace NS1;
+    S1 y = inhibited_template(NS1::S1{}); // expected-error{{call to 'inhibited_template' is ambiguous}}
+  }
+  {
+    using NS1::NNS1::inhibited_template;
+    int x = inhibited_template(NS1::S1{}); // no error
+
+    using NS1::inhibited_template;
+    NS1::S1 y = inhibited_template(NS1::S1{}); // expected-error{{call to 'inhibited_template' is ambiguous}}
+  }
+  {
+    using namespace NS2;
+    inhibited_template(NS1::S1{}); // no error
+
+    using namespace NS1::NNS1;
+    inhibited_template(NS1::S1{}); // expected-error{{call to 'inhibited_template' is ambiguous}}
+  }
+  {
+    using NS2::inhibited_template;
+    inhibited_template(NS1::S1{}); // no error
+
+    using NS1::NNS1::inhibited_template;
+    inhibited_template(NS1::S1{}); // expected-error{{call to 'inhibited_template' is ambiguous}}
+  }
+}
+
+namespace NS1 {
+  S1 inhibited_mixed(S1);
+
+  namespace NNS1 {
+    template<typename T>
+    __disable_adl int inhibited_mixed(T);
+  }
+}
+
+void test_mixed() {
+  using namespace NS1::NNS1;
+  int x = inhibited_mixed(NS1::S1{}); // no error
+}
+
+// Should be covered by the hidden functions checks, but just to be sure.
+void test_NNS1_hidden() {
+  {
+    NS1::S1 a = inhibited(NS1::S1{});
+    NS1::S1 b = inhibited_template(NS1::S1{});
+    NS1::S1 c = inhibited_mixed(NS1::S1{});
+  }
+  {
+    using namespace NS1;
+    NS1::S1 a = inhibited(NS1::S1{});
+    NS1::S1 b = inhibited_template(NS1::S1{});
+    NS1::S1 c = inhibited_mixed(NS1::S1{});
+  }
+}
+
+namespace NS1 {
+  namespace NNS1 {
+    __disable_adl void operator-(S2); // expected-error{{can't apply '__disable_adl' to operators, since they're supposed to be used with ADL}}
+
+    struct hidden_friend_operator {
+      friend void operator-(hidden_friend_operator i, int) {}
+    };
+
+    struct hidden_friend_swap {
+      __disable_adl friend void swap(hidden_friend_swap, hidden_friend_swap) {}
+    };
+  }
+}
+
+void test_friends_and_operators() {
+  -NS1::NNS1::S2{};                        // no error
+  NS1::NNS1::hidden_friend_operator{} - 1; // no error
+
+  swap(NS1::NNS1::hidden_friend_swap{}, NS1::NNS1::hidden_friend_swap{}); // expected-error{{use of undeclared identifier 'swap'}}
+}
+
+struct S {
+  __disable_adl void f();        // expected-error{{can't apply '__disable_adl' to member functions, since they don't interact with ADL}}
+  __disable_adl static void g(); // expected-error{{can't apply '__disable_adl' to member functions, since they don't interact with ADL}}
+};
+
+template <class> using common_comparison_category_t = int;
+template <class T> T declval;
+template <class> __disable_adl auto synth_three_way();
+template <class T, class U = T> using synth_three_way_result = decltype(synth_three_way(declval<U>));
+template <class> concept three_way_comparable_synthesisable = requires { synth_three_way; };
+template <class T2> struct pair {
+  template <three_way_comparable_synthesisable U = T2>
+  auto operator>(pair) -> common_comparison_category_t<synth_three_way_result<U>>;
+};
+struct pair_spaceship_invalid {
+  pair_spaceship_invalid() { test<pair<int>>(); } // expected-note{{}}
+  template <class> void test() noexcept;
+};
+template <class T> void pair_spaceship_invalid::test() noexcept {
+  auto p1 = T(), p2 = T();
+  requires { p1 > p2; }; // expected-warning 2 {{expression result unused}}
+}
-- 
2.41.0

